<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cheese High</title>
  <subtitle>Cheese High</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cheesehigh.com/"/>
  <updated>2017-01-02T03:14:57.000Z</updated>
  <id>http://cheesehigh.com/</id>
  
  <author>
    <name>CheeseHigh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《白帽子讲Web安全》 Reading Notes</title>
    <link href="http://cheesehigh.com/2017/01/02/websecurity/"/>
    <id>http://cheesehigh.com/2017/01/02/websecurity/</id>
    <published>2017-01-02T01:15:30.000Z</published>
    <updated>2017-01-02T03:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本道哥的《白帽子讲Web安全》算是我向白帽子迈出的第一步，它覆盖的内容很广，而且带有许多现实漏洞的示例讲解，不过对于没有安全经验的小白(比如我)来说还是很难完全吸收其精华，理解各种漏洞的概念和原理才是初学者的首要任务。个人建议可以结合<a href="http://www.dvwa.co.uk/" target="_blank" rel="external">DVWA</a>和FreeBuf上的相应<a href="http://www.freebuf.com/author/lonehand" target="_blank" rel="external">教程</a>来学习会更有Hands-on的感觉。</p>
<h2 id="安全世界观"><a href="#安全世界观" class="headerlink" title="安全世界观"></a>安全世界观</h2><p>安全的本质是信任问题<br>Factors of Security: Confidentiality, Integrity, Availability<br>Attack: DATA are treated as CODE<br>安全评估：资产等级划分，威胁分析，风险分析，确认解决方案<br>互联网安全的核心问题是数据安全<br>安全策略</p>
<ul>
<li>Secure by Default：黑名单(blacklist)/白名单(whitelist)，最小权限原则</li>
<li>Defense in Depth</li>
<li>数据与代码分离</li>
<li>不可预测性防御攻击</li>
</ul>
<p>ZoomEye: 公网设备指纹检索和Web指纹检索<br>CVE: Common Vulnerabilities and Exposures<br>POC: Proof of Concept<br>CAPTCHA: 计算机通过扭曲的字符图片来区分人类和计算机(逆图灵测试)  </p>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h3><p>Same Origin Policy(同源策略): Cookie, DOM, AJAX<br>多进程浏览器<br>浏览器沙箱(sandbox)：不信任代码隔离运行  </p>
<h3 id="跨站脚本攻击XSS-Cross-Site-Script"><a href="#跨站脚本攻击XSS-Cross-Site-Script" class="headerlink" title="跨站脚本攻击XSS(Cross Site Script)"></a>跨站脚本攻击XSS(Cross Site Script)</h3><p>Code injection attack that allows an attacker to execute malicious JavaScript in another user’s browser<br>Reflected XSS: Trick victim to send script(query)<br>Persistent XSS: Store script in website’s database(comment)<br>DOM-based XSS: executed at some point after the page has loaded by changing DOM with JS, however the others are executed when the page is loaded<br>Danger: Cookie, Ajax request, Modify HTML<br>XSS Payload<br>Preventing XSS: Context matters<br>Encoding: escape input, code -&gt; data<br>Validation: filter input<br>Content Security Policy (CSP): only use resources from trusted sources, enabled by http response header<br><code>&lt;script&gt;alert(&#39;/XSS/&#39;);&lt;/script&gt;</code><br><code>&lt;sc&lt;script&gt;ript&gt;alert(&#39;/XSS/&#39;);&lt;/script&gt;</code><br><code>&lt;img src=1 onerror=alert(&#39;/XSS/&#39;)&gt;</code>  </p>
<h3 id="跨站请求伪造CSRF-Cross-Site-Request-Forgery"><a href="#跨站请求伪造CSRF-Cross-Site-Request-Forgery" class="headerlink" title="跨站请求伪造CSRF(Cross Site Request Forgery)"></a>跨站请求伪造CSRF(Cross Site Request Forgery)</h3><p>victim visits malicious site and is sent state-changing request to target site by victim’s browser which is authenticated<br><code>&lt;img src=&quot;target.com/do?method=delete&quot; /&gt;</code><br>both GET and POST can work<br>session cookie: in the process of browser; third-party cookie: in local disk with expire time<br>Prevent: verification code, referrer header, token  </p>
<h3 id="点击劫持-ClickJacking"><a href="#点击劫持-ClickJacking" class="headerlink" title="点击劫持(ClickJacking)"></a>点击劫持(ClickJacking)</h3><p>Transparent iframe is covered on the original content<br>图片覆盖，拖拽劫持，触屏劫持(TapJacking)  </p>
<h3 id="HTML5安全"><a href="#HTML5安全" class="headerlink" title="HTML5安全"></a>HTML5安全</h3><p>新标签: <code>&lt;video&gt;, &lt;audio&gt;, &lt;canvas&gt;</code>  </p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><h3 id="SQL注入-SQL-Injection"><a href="#SQL注入-SQL-Injection" class="headerlink" title="SQL注入(SQL Injection)"></a>SQL注入(SQL Injection)</h3><p>Inject SQL commands which DB will execute<br><code>SELECT * FROM table WHERE column = xxx OR 1 = 1</code><br>测试是否存在注入 -&gt; 获取SQL语句格式 -&gt; 获取数据库名，表名，字段名<br>Blind Injection: No result of query from DB, brute force to validate DB information(布尔判断或时间延迟)<br>存储过程(Stored Procedure): User-defined function<br>Prevent: parameterized(PreparedStatement), PDO(PHP Data Object), check data type  </p>
<h3 id="文件上传-File-Upload"><a href="#文件上传-File-Upload" class="headerlink" title="文件上传(File Upload)"></a>文件上传(File Upload)</h3><p>Upload web script which is resolved by server and get webshell authority<br>%00截断: file.php%00.jpg<br>Prevent: non-executable upload directory, check file type and header  </p>
<h3 id="文件包含-File-Inclusion"><a href="#文件包含-File-Inclusion" class="headerlink" title="文件包含(File Inclusion)"></a>文件包含(File Inclusion)</h3><p>include(); require();<br>包含的文件直接显示或作为代码执行: 本地文件包含(LFI)，远程文件包含(RFI)<br>变量覆盖漏洞  </p>
<h3 id="认证-Authentication-与授权-Authorization"><a href="#认证-Authentication-与授权-Authorization" class="headerlink" title="认证(Authentication)与授权(Authorization)"></a>认证(Authentication)与授权(Authorization)</h3><p>认证作为授权的根据<br>多因素认证<br>Rainbow Table: MD5 -&gt; 明文，使用md5(password + salt)防御<br>Session(会话) ID加密后保存在cookie中<br>垂直权限管理: Role Based Access Control; 水平权限管理: Same Role  </p>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>分组加密: 分组(ECB模式)或迭代(CBC模式)<br>流加密: 每个字节操作<br>密钥不要硬编码在代码里，应保存在配置文件或数据库中<br>不要使用弱伪随机数  </p>
<h3 id="分布式拒绝服务-Distributed-Denial-of-Service-DDoS"><a href="#分布式拒绝服务-Distributed-Denial-of-Service-DDoS" class="headerlink" title="分布式拒绝服务(Distributed Denial of Service, DDoS)"></a>分布式拒绝服务(Distributed Denial of Service, DDoS)</h3><p>网络层DDOS: 伪造IP地址发送大量SYN包，服务器不断对这些IP重发SYN+ACK，消耗资源<br>应用层DDOS: 对消耗资源的页面发起大量正常请求<br>解析正则表达式也可能会消耗大量资源<br>Prevent: 性能优化，限制请求频率，验证码  </p>
<h3 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h3><p>独立低权限用户，及时同步访问日志  </p>
<h2 id="产品、业务与运营"><a href="#产品、业务与运营" class="headerlink" title="产品、业务与运营"></a>产品、业务与运营</h2><p>安全是产品的一个特性<br>钓鱼(Phishing): 高仿网站，骗取用户账户密码<br>发件人邮箱可以被伪造<br>黑色产业链: 挂马钓鱼盗取游戏、网银账号，垃圾注册，利用用户隐私诈骗<br>安全开发流程(Security Development Lifecycle)<br>立项阶段与项目经理充分沟通，将安全方案写入开发规范<br>模糊测试(Fuzzing Test): 输入随机数据检测程序漏洞<br>安全是一个持续的过程: 漏洞修补，安全监控，入侵检测，应急响应(Security Response Center)  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本道哥的《白帽子讲Web安全》算是我向白帽子迈出的第一步，它覆盖的内容很广，而且带有许多现实漏洞的示例讲解，不过对于没有安全经验的小白(比如我)来说还是很难完全吸收其精华，理解各种漏洞的概念和原理才是初学者的首要任务。个人建议可以结合&lt;a href=&quot;http://www
    
    </summary>
    
      <category term="Tech" scheme="http://cheesehigh.com/categories/Tech/"/>
    
    
  </entry>
  
  <entry>
    <title>《全球通史》 Reading Notes</title>
    <link href="http://cheesehigh.com/2017/01/01/globalhistory/"/>
    <id>http://cheesehigh.com/2017/01/01/globalhistory/</id>
    <published>2017-01-01T09:55:07.000Z</published>
    <updated>2017-01-01T12:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>大四的最后一学期看完了L. S. Stavrianos的《全球通史》，上下两册详细阐述了从史前时代一直到21世纪的历史发展脉络，尽管不可能覆盖所有历史事件，但整个发展线条比较流畅，读完能够建立一个相对完整的历史框架。历史启示当代的思想贯穿全书，许多地方引人深思。笔记主要以重要知识点的形式呈现。</p>
<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>公元前 = B.C. = Before Christ<br>公元后 = A.D. =Anno Domini = 耶稣诞生之年  </p>
<p>责任要靠社会机制而不是个人美德来维系<br>社会变革滞后于技术变革<br>当代核心问题：第三世界平等发展权，科技的负面影响<br>文化：生存的智慧  </p>
<p>太阳只是银河系上百亿颗恒星中的一颗，银河系只是宇宙几百万个星系中的一个<br>地球形成于50亿年前，40亿年前开始出现生命，人类从几万年前出现<br>生物由非生物进化而来<br>人类靠智力来适应环境变化<br>非洲起源-多地域起源  </p>
<h2 id="旧石器时代（公元前几万年）"><a href="#旧石器时代（公元前几万年）" class="headerlink" title="旧石器时代（公元前几万年）"></a>旧石器时代（公元前几万年）</h2><p>食物采集者，打制法，男女都可以获得食物，平等，依赖自然，相信巫术，类似社会主义公有制，反对者要杀掉<br>经常迁徙，高度杂食，食物供求平衡，杀掉后出生的婴儿，可以栽培驯养的动植物种类较少<br>智人出现以后才有人种差别，高加索人种，蒙古人种，尼格罗人种，澳大利亚人种  </p>
<h2 id="新石器时代（公元前几千年）"><a href="#新石器时代（公元前几千年）" class="headerlink" title="新石器时代（公元前几千年）"></a>新石器时代（公元前几千年）</h2><p>食物生产者，人口压力不得不生产食物<br>农业革命，磨制法，种植植物，蓄养动物<br>农业独立发源地：中东，拉美，中国北部，为扩大耕地而传播<br>三大谷类植物区：东南亚的稻米区，美洲的玉米区，欧亚非的小麦区<br>刀耕火种：砍树，烧树剩下的地上种植<br>梯田，培高田地<br>驯化动物成为游牧民族，较农民穷困，经常入侵伟大文明<br>以氏族-村庄-部落而定居，时常有瘟疫和饥荒，发展制陶和纺织技术，平等主义，生产力被阻碍<br>牲畜乳喂小孩导致人口剧增<br>从事农业的三大人种扩张<br>决定人类行为的不是基因，而是所处的社会<br>人性是一种潜在性，会因社会影响而具有多种表现形式  </p>
<h2 id="欧亚大陆古代文明（3500-BC-1000-BC）"><a href="#欧亚大陆古代文明（3500-BC-1000-BC）" class="headerlink" title="欧亚大陆古代文明（3500 BC-1000 BC）"></a>欧亚大陆古代文明（3500 BC-1000 BC）</h2><p>两河流域（底格里斯河与幼发拉底河），尼罗河，印度河，黄河<br>文明特征：城市，国家，纳贡，税收，文字，阶级，艺术，科学，建筑<br>山区迁移到大河流域<br>灌溉农业，冶金术，铜+锡=青铜，犁<br>权力从祭司转移到军事首领和国王<br>社会关系不平等，两性关系不平等<br>妇女无法参与新型农业，照料牲畜，砍伐树林，维护灌溉渠道<br>男人确保其为继承人的父亲，从而控制女性的性活动，包括守贞和割礼<br>美索不达米亚<br>苏美尔-巴比伦-赫梯帝国-亚述帝国-波斯帝国（伊朗）<br>萨尔贡，汉谟拉比，刻在泥板上的楔形文字，书吏<br>汉谟拉比法典：阶级歧视，性别歧视，男性可以纳妾<br>埃及<br>自然屏障，稳定<br>金字塔，法老为神王，公有制<br>克里特岛<br>米诺斯文明，平等主义<br>印度河<br>计划性，之字形写字顺序<br>商朝<br>姓在前，家庭大于个人<br>甲骨文<br>缠足无法走远<br>游牧民族：闪米特人，印欧人，蒙古突厥人<br>驯化马，战车，冶铁，作战能力增强<br>亚该亚人，多里安人入侵希腊<br>赫梯人，亚述人，波斯人入侵中东<br>雅利安人入侵印度<br>希腊遭到入侵，荷马史诗《伊利亚特》与《奥德赛》<br>印度教《吠陀》，三大神：造物主梵天，保护神毗湿奴，毁灭神湿婆  </p>
<h2 id="欧亚大陆古典文明（1000-BC-500）"><a href="#欧亚大陆古典文明（1000-BC-500）" class="headerlink" title="欧亚大陆古典文明（1000 BC-500）"></a>欧亚大陆古典文明（1000 BC-500）</h2><p>物物交换-贵金属交换-硬币（保证质量）<br>经济发展和政治的中央集权制相互促进<br>驿道网<br>变化的时代产生思想家<br>商业，文化联结<br>亚历山大大帝东征，局限地传播希腊文化  </p>
<p><strong>基督教</strong>源于中东犹太教<br>犹太教不认耶稣<br>天主教，东正教，新教<br>目前30%的人信仰<br>独一真神，三位一体（圣父，圣子，圣灵）<br>创造天地万物，亚当夏娃吃知善恶树上的禁果，人生而有罪<br>耶和华=上帝，玛利亚=圣母（贞童感孕）<br>耶稣基督(Jesus Christ)=圣子，基督=受膏者，救世主<br>将会再来审判一切活人死人<br>耶稣受难=为世人的罪完成救赎，弥撒：纪念耶稣受难<br>耶稣在耶路撒冷，受难，第三天复活，四十天后升天<br>亚伯拉罕：先知，耶和华给予祝福<br>神父主持弥撒和婚礼，传教，服务信徒，教皇是耶稣的代表<br>强调爱人<br>礼拜天进行聚会礼拜<br>天主教神父单身，新教牧师可结婚<br>反对堕胎，同性恋是罪<br>天主教堂有雕塑，东正教堂有画像，新教教堂只有十字架<br>政教分离  </p>
<p><strong>伊斯兰教</strong>起源于麦加<br>真主：安拉<br>先知（真主的信使）：亚伯拉罕-摩西-耶稣-穆罕默德<br>古兰经<br>伊斯兰教徒：穆斯林（伊斯兰和穆斯林的意思都是顺从安拉）<br>哈里发：穆罕默德的代理人<br>逊尼派（多数），什叶派<br>目前23%的人信仰<br>五功：清真言，向麦加的克尔白礼拜，施舍，斋戒，朝觐（一生要去一次麦加）<br>政教合一，伊斯兰教法（沙里亚），622年为元年<br>不吃猪肉和酒，戴希贾布<br>穆罕默德在耶路撒冷夜行登霄  </p>
<p><strong>佛教</strong>源于印度<br>悉达多·乔达摩=释迦牟尼佛=佛陀（觉悟者）<br>人生是苦的，消灭欲望，达到涅槃（死亡），摆脱六道轮回<br>三善道：天道，阿修罗道，人道<br>三恶道：畜生道，饿鬼道，地狱道<br>六根：眼，耳，鼻，舌，身，意<br>北传佛教：汉传佛教，藏传佛教<br>南传佛教<br>目前7%的人信仰  </p>
<p><strong>儒家</strong><br>提供稳定的政治和社会秩序<br>四书：论语，孟子，大学，中庸<br>五经：诗经，尚书，礼记，周易，春秋<br>周朝礼乐崩坏<br>孔子重建礼乐秩序，仁是礼的核心<br>孟子民为贵，社稷次之，君为轻<br>荀子重礼法<br>秦始皇焚书坑儒<br>汉武帝独尊儒术<br>宋朝程朱理学<br>现代衰败<br>内圣外王，民本与现代民主思想不同，仅有“民有”与“民享”，而不及于“民治”<br>三纲五常为主从关系<br>与教育、仕途联系<br>强调集体高于个人，权威高于自由，责任大于权利<br>个人无权对抗国家，和谐合作优先于分歧和竞争<br>维护秩序和尊重统治者是核心价值，因此儒家是不民主的  </p>
<p><strong>道家</strong><br>长生不死，得道成仙，济世救人<br>太上老君 = 老子<br>天庭<br>封神榜  </p>
<p><strong>希腊</strong><br>巴尔干半岛<br>伯罗奔尼撒半岛=希腊南部半岛<br>殖民地，高地上的城邦<br>生产橄榄油和葡萄酒，率先使用硬币，重甲步兵<br>斯巴达人军国主义<br>雅典人民主化：梭伦-庇西特拉图-克里斯提尼（五百人会议）<br>希腊波斯战争，马拉松战役，温泉关战役（斯巴达300勇士），希腊胜<br>伯里克利：雅典是希腊的学校<br>伯罗奔尼撒战争：斯巴达战胜雅典<br>马其顿国王腓力二世统一希腊，儿子是亚历山大大帝<br>与诸神平等交换，科学，戏剧，哲学，建筑，文学，自由批判的精神<br>希腊三贤，师生关系：苏格拉底-柏拉图-亚里士多德<br>理想国四个阶层：统治者，哲学家，武士，平民<br>存在奴隶，妇女地位低<br>亚历山大大帝征服波斯帝国<br>希腊化时代，科学发展，盖伦，阿基米德，希波克拉底<br>医神阿斯克勒庇俄斯，阿波罗之子，蛇杖  </p>
<p><strong>罗马</strong><br>亚平宁半岛<br>打败迦太基汉尼拔，三次布匿战争<br>共和国转向帝国，尤里乌斯凯撒大帝征服英法德被暗杀，养子奥古斯都屋大维<br>十二铜表法<br>东西分治：戴克里先（西罗马帝国）；君士坦丁（东罗马帝国，拜占庭帝国）<br>基督教国教，政教分离，把上帝的归上帝，把凯撒的归凯撒<br>奴隶制度妨碍技术革新，生产率低下  </p>
<p><strong>印度</strong><br>雅利安人入侵被同化<br>种姓等级制度：祭司（婆罗门），武士（刹帝利），农民（吠舍），土著（首陀罗），贱民<br>种姓等级制度高于政治制度<br>因果报应，轮回转世<br>主要信印度教，佛教衰落<br>摩揭陀王国<br>孔雀帝国<br>旖陀罗笈多·孔雀，孙子阿育王<br>贵霜帝国<br>笈多帝国<br>发明十进制数字，传到阿拉伯  </p>
<p><strong>中国</strong><br>孔子：其人存，则其政举；其人亡，则其政息<br>注重现世<br>周：诸子百家<br>春秋战国<br>秦：分封制-&gt;中央集权帝制，法家，郡县制，统一度量衡货币，焚书坑儒，筑长城，China的名字由来<br>汉<br>吏（官员任免）户（财政税收）礼（科举）兵（国防）刑（司法）工（工程）<br>院试-秀才，乡试-举人（解元），会试-贡士（会元），殿试-进士（状元）<br>科举制度扼杀了创造力，培育了顺从性<br>朝代更替的根本原因是经济循环：开国社会安定，人口增加，生产扩大-&gt;渐渐支出增加到基建，国防-&gt;税收增加-&gt;自耕农割地给地主-&gt;税收下降，生产下降-&gt;农民起义<br>三国，晋，南北朝  </p>
<p>3-6世纪匈奴人和日耳曼人入侵欧亚，西罗马帝国灭亡<br>加洛林王朝查理曼大帝-神圣罗马帝国<br>文明带来了阶级和不平等，但是促进了人类的生产力和技术进步，人类可以摆脱疾病和饥饿，文明是诅咒还是福音取决于人类将文明中积累的知识用于破坏还是建设<br>也许所有生物存在的意义就是存在本身  </p>
<h2 id="欧亚大陆中世纪文明（500-1500）"><a href="#欧亚大陆中世纪文明（500-1500）" class="headerlink" title="欧亚大陆中世纪文明（500-1500）"></a>欧亚大陆中世纪文明（500-1500）</h2><p>骑士精神：贵族阶级，崇尚勇武，荣耀，忠诚  </p>
<p>伊斯兰教兴起<br>阿拔斯王朝<br>阿尤布王朝萨拉丁<br>奥斯曼帝国，土耳其，逊尼派<br>苏莱曼一世<br>萨菲帝国，波斯，什叶派<br>阿拔斯一世<br>莫卧儿帝国，印度<br>巴布尔，阿克巴  </p>
<p>突厥人、蒙古人侵略<br>突厥人皈依伊斯兰教，塞尔柱帝国，入侵小亚细亚和印度<br>蒙古人征服欧亚大陆，被同化  </p>
<p><strong>十字军东征（Crusades）</strong><br>罗马天主教教皇准许下对异教徒的十次宗教战争<br>虽然以捍卫宗教、解放圣地为口号，但实际上是以政治经济社会等目的为主，伴随着一定程度上的劫掠  </p>
<p><strong>拜占庭帝国</strong><br>查士丁尼大帝收复失地<br>拉丁人第四次十字军东征，攻占君士坦丁堡，屠城<br>奥斯曼土耳其人攻占君士坦丁堡<br>保守，改变自身以适应时代变化  </p>
<p><strong>隋，唐，五代十国，宋，元，明，清</strong><br>唐朝思想开放，宋朝未能收复北方失地，海外贸易，文学艺术达到顶峰<br>元朝雇佣外籍官员<br>明朝民族优越感和理学保守，地主贵族，约束自由商业，航海业发达但是禁海令  </p>
<p><strong>日本</strong><br>氏族统治<br>大化改新：仿效唐朝建立中央集权国家，确立天皇体制<br>源氏物语<br>武士道：绝对效忠封建领主，完成责任<br>大名：大地主<br>幕府：将军<br>镰仓幕府：源赖朝<br>织田信长家臣丰臣秀吉：万历朝鲜战争<br>丰臣秀吉让德川家康辅佐儿子，后者统一日本（江户时代）  </p>
<p><strong>朝鲜</strong><br>高丽王朝<br>朝鲜王朝<br>谚文<br>日韩合并<br>二战后由美苏托管，建立朝鲜和韩国  </p>
<p><strong>多元化的西方</strong><br>独立教会，封建领主，农奴代替奴隶，商人获得权力<br>西方最古老的大学，教会学校培养教士：意大利博洛尼亚大学1088<br>为了贸易和传教而海上扩张<br>落后的社会更有可能适应变化，超过领先的社会<br>货币化催生资本主义<br>马基雅维利：君主论  </p>
<p><strong>文艺复兴（Renaissance）</strong><br>中世纪晚期发源于意大利佛罗伦萨<br>商人家族赞助<br>人文主义：个性解放，科学，人权  </p>
<p><strong>宗教改革</strong><br>马丁·路德：反对教宗的权威，人和上帝并不需要通过教会<br>教会分裂成各教派，权力由教会向政府转移  </p>
<p><strong>非洲</strong><br>撒哈拉沙漠，卡拉哈里沙漠<br>7世纪伊斯兰教入侵<br>苏丹帝国时代<br>加纳帝国，马里帝国，桑海帝国  </p>
<p><strong>美洲</strong><br>印第安人从西伯利亚到阿拉斯加<br>阿拉斯加爱斯基摩人<br>中世纪印第安人帝国，相当于古代文明<br>玛雅帝国<br>阿兹特克帝国<br>印加帝国<br>培育的植物多  </p>
<p><strong>澳洲</strong><br>相当于旧石器时代  </p>
<h2 id="16世纪伊比利亚扩张（1500-1600）"><a href="#16世纪伊比利亚扩张（1500-1600）" class="headerlink" title="16世纪伊比利亚扩张（1500-1600）"></a>16世纪伊比利亚扩张（1500-1600）</h2><p>穆斯林封锁了陆上贸易，西欧只能另辟海路<br>葡萄牙恩里克，西班牙刚统一<br>哥伦布认为横渡大西洋是前往亚洲的捷径，在西班牙的资助下发现美洲大陆<br>葡萄牙达伽马绕过好望角到达印度<br>西班牙也想到达印度，麦哲伦为西班牙穿过麦哲伦海峡到达菲律宾，余下船员完成环球航行<br>西班牙殖民者征服阿兹特克帝国和印加帝国，剥削印第安人<br>由于欧洲战争和经济从属性（不能生产制成品）而衰落  </p>
<p><strong>荷法英扩张（1600-1763）</strong><br>英国海盗抢夺西班牙利益，伊丽莎白一世，奴隶贸易创始人约翰霍金斯打败西班牙无敌舰队<br>荷兰卖鲱鱼，廉价货船，建立共和国，第一个股票交易所和银行<br>17世纪荷兰扩张，占领南非（后被英国接管）<br>建立股份制的东印度公司<br>18世纪英法竞争，1763年七年战争英国战胜法国，签订《巴黎和约》<br>三角贸易：非洲提供奴隶运往美洲，美洲提供原料运往欧洲，欧洲工业生产<br>在中非，中东，印度，中国仅有沿海据点，起初敬仰文化  </p>
<p><strong>俄国扩张</strong><br>乌拉尔山脉分割欧亚大陆，冻土-森林-草原-沙漠<br>俄罗斯公国伊凡大帝，第一位沙皇<br>向东征服西伯利亚<br>民族的马赛克，导致独立  </p>
<h2 id="西方占据优势（1763-1914）"><a href="#西方占据优势（1763-1914）" class="headerlink" title="西方占据优势（1763-1914）"></a>西方占据优势（1763-1914）</h2><p><strong>科学革命</strong><br>包含无限进步的可能性，比农业革命更伟大<br>将原本分离的思想家和劳动者结合<br>英国皇家学会主席艾萨克牛顿《自然哲学的数学原理》，人类可以凭理性找到自然规律<br>物理-天文学，化学-纺织业，生物-物种起源  </p>
<p><strong>工业革命</strong><br>商业革命获得资本，圈地为工厂提供劳动力<br>詹姆斯瓦特发明蒸汽机提供动力，纺纱机，煤炭石油天然气（采矿），钢铁（冶金），铁路，轮船，电报<br>亚当斯密《国富论》<br>生产率提高和医学发展促进人口增长，城市化，新消费主义<br>大量欧洲移民导致美洲和澳洲的欧化<br>帝国主义：一个国家对其他国家的统治  </p>
<p><strong>政治革命</strong><br>自由主义，社会主义，民族主义<br>英国革命<br>1215年，约翰王征税，大宪章限制国王权利<br>清教徒：清除英国国教会内保有大公教会仪式的改革派<br>清教徒打败了保皇派，处死查理一世，克伦威尔建立英格兰共和国<br>王朝复辟，1688年不流血光荣革命，《权利法案》：国会至上  </p>
<p><strong>启蒙运动（Enlightenment）</strong><br>理性发展知识可以解决人类实存的基本问题，进步走向光明<br>法兰西启蒙运动三剑客<br>卢梭：社会契约论<br>孟德斯鸠：三权分立<br>伏尔泰：言论自由  </p>
<p><strong>美国革命</strong><br>英国清教徒坐五月花号到达美国<br>英法战争，英国向殖民地征税，美国独立战争<br>托马斯·潘恩《人的权利》：在厌倦了战争和人类的屠杀后，他们坐下来休息，并称之为和平<br>1776年约翰亚当斯（第二任总统），托马斯杰斐逊（第三任总统），本杰明富兰克林等五人起草《独立宣言》<br>7月4日美国独立日<br>1787年费城制定联邦宪法<br>乔治华盛顿（第一任总统）<br>北方工商业，南方种植业，因废立奴隶制度而爆发南北战争<br>亚伯拉罕林肯胜利，解放黑奴<br>西进运动<br>西奥多罗斯福反托拉斯垄断，进步运动<br>福特流水线<br>富兰克林罗斯福新政干预经济  </p>
<p><strong>法国革命</strong><br>路易十六强加赋税，被迫召开三级（教士，贵族，农民）国民议会，1789年人民攻占巴士底狱<br>7月14日法国国庆日<br>自由，平等，博爱<br>革命走向极端<br>拿破仑国内改革《民法典》和军事战役<br>戴高乐  </p>
<p><strong>德国</strong><br>10月3日德国国庆日，西德东德统一<br>德意志神圣罗马帝国，邦国分裂<br>李斯特取消国内关税<br>普法战争，铁血宰相俾斯麦统一德国<br>全民教育  </p>
<p><strong>俄国</strong><br>彼得大帝学习西方，建立圣彼得堡<br>叶卡捷琳娜无法废除农奴制度<br>斯拉夫派-西欧派<br>克里米亚战争输给英法<br>扩张到阿拉斯加（卖给美国），黑龙江，中亚<br>日俄战争中战败<br>第一次俄国革命：一月大屠杀，《十月宣言》颁布宪法建立杜马，最终失败<br>布尔什维克：多数派<br>苏维埃：工人会议<br>列宁领导布尔什维克革命，割地退出一战，实行市场经济<br>斯大林废除新经济政策，实行五年计划  </p>
<p><strong>中东</strong><br>巴尔干半岛基督教各国独立于奥斯曼帝国  </p>
<p><strong>印度</strong><br>莫卧儿帝国衰落，英国立足孟加拉，征服印度和尼泊尔<br>英国阻挠工业化，开办学校<br>印度民族主义觉醒  </p>
<p><strong>日本</strong><br>1853年黑船在横须贺登陆<br>德川幕府倒台，明治维新<br>涩泽荣一学习欧洲，弃官从商<br>1871年岩仓使节团出访欧美，大久保利通<br>伊藤博文颁布宪法  </p>
<p><strong>非洲</strong><br>酋长把黑奴从内陆运到沿海卖给西方<br>技术进步渐渐不需要黑奴<br>各国瓜分非洲：法国西非，比利时中非，英德东非  </p>
<p><strong>美洲</strong><br>英属北美，西班牙属拉美和南美西部，葡萄牙属南美东部<br>欧化  </p>
<p><strong>波利尼西亚</strong><br>西欧占领波利尼西亚，高贵的野蛮人  </p>
<h2 id="西方衰落与成功（1914-）"><a href="#西方衰落与成功（1914-）" class="headerlink" title="西方衰落与成功（1914-）"></a>西方衰落与成功（1914-）</h2><p><strong>第一次世界大战（1914-1918）</strong><br>原因：经济与殖民地的争夺产生了联盟体系+民族主义要求独立+奥匈帝国王储斐迪南大公被塞尔维亚青年射杀<br>同盟国：德国，奥匈帝国，奥斯曼帝国，保加利亚<br>协约国<br>防守优于进攻：战壕和机枪群<br>奥匈帝国进攻塞尔维亚，俄国出兵，德国对法俄宣战<br>西线消耗战，东线俄国革命后撤退，南线<br>美国参战，坦克飞机出现，结束战争，成为债权国，经济工业腾飞<br>国际联盟，民族自决，东欧国家独立，殖民地托管<br>凡尔赛和约  </p>
<p>反犹主义：犹太人不承认耶稣，迫害耶稣，剥削的资本家<br>锡安主义：犹太复国主义<br>凯末尔建立土耳其共和国<br>犹太人移居巴勒斯坦，和阿拉伯人冲突，英国调停<br>甘地非暴力抵制英国<br>共产主义在俄国分土地给农民成功，在德国失败（魏玛共和国）<br>法西斯：极致民族主义与革命<br>纳粹：国家民族社会主义<br>墨索里尼让混乱的意大利成为法西斯国家<br>德国加入国联，洛迦诺公约拒绝战争<br>经济不平衡 -&gt; 美国大萧条 -&gt; 希特勒上台，鼓吹生存空间论，引发二战<br>918事变日本入侵中国东北，意大利征服埃塞俄比亚<br>西班牙内战民族主义的佛朗哥打败共和政府<br>德国获得奥地利，捷克斯洛伐克  </p>
<p><strong>第二次世界大战（1939-1945）</strong><br>同盟国<br>轴心国：德意日<br>进攻优于防守：坦克和飞机<br>苏德签订互不侵犯条约，德国闪击波兰<br>德国占领法国，不列颠空战失败，占领巴尔干半岛和北非，入侵苏联，种族灭绝<br>日本偷袭珍珠港，占领东南亚<br>斯大林格勒保卫战，英国在北非胜利，墨索里尼垮台，盟军轰炸德国，美军在太平洋胜利<br>英美联军诺曼底登陆解放法国，苏联占领柏林<br>美国投下原子弹，苏联对日宣战，日本投降  </p>
<p>殖民地独立<br>北越：胡志明；南越<br>南非种族隔离，曼德拉就任总统  </p>
<p><strong>冷战</strong><br>英苏瓜分巴尔干半岛<br>雅尔塔会议：东欧国家自由选举，斯大林不同意<br>马歇尔计划-经济互助委员会<br>中苏摩擦：边界问题+意识形态  </p>
<p>联合国<br>前身国际联盟，1945年成立<br>维护和平，经济发展，消除饥饿疾病愚昧，保护人权<br>中文，英文，法语，俄语，西班牙语，阿拉伯语<br>欧盟<br>欧洲经济共同体，欧洲原子能共同体<br>1993年成立  </p>
<p><strong>第二次工业革命</strong><br>电力取代蒸汽动力<br>苏联经济减速解体<br>生态破坏，种族融合，性别平等，核扩散（核冬天）  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大四的最后一学期看完了L. S. Stavrianos的《全球通史》，上下两册详细阐述了从史前时代一直到21世纪的历史发展脉络，尽管不可能覆盖所有历史事件，但整个发展线条比较流畅，读完能够建立一个相对完整的历史框架。历史启示当代的思想贯穿全书，许多地方引人深思。笔记主要以重
    
    </summary>
    
      <category term="History" scheme="http://cheesehigh.com/categories/History/"/>
    
    
  </entry>
  
  <entry>
    <title>《经济学原理》 Reading Notes</title>
    <link href="http://cheesehigh.com/2017/01/01/priciplesofeconomics/"/>
    <id>http://cheesehigh.com/2017/01/01/priciplesofeconomics/</id>
    <published>2017-01-01T09:05:34.000Z</published>
    <updated>2017-01-01T09:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>暑假读了哈佛大学经济学教授Gregory N. Mankiw的《经济学原理》，全套上下册十分系统地阐述了微观经济学与宏观经济学的基本内容和框架，并且带有许多现实中的新闻摘录和例子，对初学者非常友好。这里主要以重要知识点的形式呈现。</p>
<h2 id="经济学十大原理"><a href="#经济学十大原理" class="headerlink" title="经济学十大原理"></a>经济学十大原理</h2><ol>
<li>权衡取舍</li>
<li>机会成本(opportunity cost)</li>
<li>边际收益和边际成本(marginal benefit/cost)</li>
<li>激励(incentive)</li>
<li>贸易能互利</li>
<li>市场经济market economy(看不见的手): 每个人利己促进总体经济</li>
<li>政府(看得见的手)</li>
<li>生产率(productivity)决定生活水平</li>
<li>通货膨胀(inflation)</li>
<li>通货膨胀与失业的短期权衡，经济周期(business cycle)</li>
</ol>
<h2 id="微观经济学-Microeconomics-家庭和企业如何做出决策和相互交易"><a href="#微观经济学-Microeconomics-家庭和企业如何做出决策和相互交易" class="headerlink" title="微观经济学(Microeconomics): 家庭和企业如何做出决策和相互交易"></a>微观经济学(Microeconomics): 家庭和企业如何做出决策和相互交易</h2><p>循环流量图(Circular-flow Diagram)<br>企业(出售物品与服务，雇佣生产要素) - 家庭(购买物品与服务，出售生产要素)<br>生产可能性边界(Production Possibilities Frontier)<br>生产要素给定时一个经济所能生产的产品数量组合  </p>
<p>绝对优势：绝对成本较少<br>比较优势：机会成本较少<br>专业化与贸易：各自从事具有比较优势(更擅长)的工作能够提高总生产量从而达到互利，支持自由贸易<br>本地价格低于世界价格则出口，生产者剩余增加，消费者剩余减少，总剩余增加<br>本地价格高于世界价格则进口，生产者剩余减少，消费者剩余增加，总剩余增加<br>关税(tariff)：对在国外生产国内销售的物品征收的税<br>关税减少进口量，消费者剩余减少，生产者剩余增加，产生无谓损失  </p>
<p>需求曲线：价格-需求量<br>供给曲线：价格-供给量<br>需求曲线与供给曲线交点为均衡<br>弹性：需求量和供给量对某种因素变动的反应程度，弹性大小与时间长短有关<br>需求价格弹性：需求量变动百分比 / 价格变动百分比(中点法)<br>供给价格弹性：供给量变动百分比 / 价格变动百分比(中点法)<br>价格上限引起短缺<br>价格下限引起过剩<br>税收归宿：税收负担在市场参与者之间分配的方式<br>无论向谁征税都会让买卖双方负担，弹性较小的一方承担较多税收，缩小市场规模<br>税收若大于收益，则产生无谓损失，任一方弹性越大无谓损失越大<br>随着税收规模增加，税收收入先增加后减少<br>税收：个人所得税，社会保险税，公司所得税<br>支出：社会保障，国防，国债利息，教育<br>人口老龄化导致社会保障支出增加，长期预算赤字<br>纳税受益原则，支付能力原则  </p>
<p>消费者剩余：消费者愿意支付的量减去实际支付的量，需求曲线以下和价格以上的面积<br>生产者剩余：生产者出售物品得到的量减去生产成本，供给曲线以上和价格以下的面积<br>总剩余=消费者剩余+生产者剩余<br>福利经济学：消费者剩余和生产者剩余用于衡量福利，在均衡点可以最大化总剩余，资源配置有效率  </p>
<p>外部性：对旁观者福利的影响<br>外部性内在化：使人们意识到外部性，负外部性征矫正税+许可证，正外部性补贴<br>排他性：阻止其他人使用<br>消费竞争性：一个人使用则减少其他人使用<br>市场失灵是因为缺乏产权  </p>
<p>利润(profit) = 总收益(total revenue) - 总成本(total cost)<br>经济学家考虑显性成本+隐性成本，会计师考虑显性成本<br>总成本=固定成本+可变成本<br>生产曲线：产量-投入<br>总成本曲线：总成本-产量<br>边际产量递减，边际成本递增<br>平均总成本曲线为U型，最低点产量为有效规模，与边际成本曲线相交<br>边际收益与边际成本相交点为利润最大化点  </p>
<p>完全竞争市场<br>许多交易相近产品的买者和卖者，每一个买者和卖者都是价格接受者<br>价格=边际收益<br>沉没成本(sunk cost)：已经发生且无法收回的成本，短期不予考虑<br>短期：若平均可变成本大于价格，则停止营业<br>短期成本通过调整生产设备变为长期成本<br>长期：若平均总成本大于价格，则退出市场<br>长期平均总成本下降为规模经济（专业化高），上升为规模不经济（协调问题）<br>市场长期均衡：价格=边际成本=最低平均总成本，经济利润为零  </p>
<p>垄断企业(一家)<br>价格决定者，服从市场需求曲线<br>价格&gt;边际收益<br>利润最大化：边际成本与边际收益相交的产量(小于社会合意的产量)，需求曲线上该产量的价格<br>价格歧视：以不同价格出售给不同买者，减少无谓损失，增加企业利润  </p>
<p>垄断竞争<br>许多出售相似但不相同产品的企业<br>短期是垄断，长期经济利润为零<br>生产能力过剩：产量小于有效规模<br>价格高于边际成本<br>广告作为质量信号  </p>
<p>寡头<br>少数提供相似或相同产品的企业<br>卡特尔：联合的寡头<br>纳什均衡：相互作用的经济主体在假定所有其他主体策略既定时自己最优策略的状态<br>产量大于垄断小于完全竞争<br>价格小于垄断大于完全竞争<br>寡头数量越少越接近于垄断，数量越多越接近于完全竞争<br>囚徒困境：尽管合作有利于双方，由于利己难以维持合作<br>掠夺性定价：先降价抢回市场份额再提价  </p>
<p>生产要素市场：劳动，土地，资本(设备+建筑物)<br>利润最大化：边际产量值=工资   &lt;=&gt;   边际收益=边际成本<br>劳动需求曲线：边际产量值(边际产量*价格)-工人数量<br>生产率增长率≈工资增长率<br>补偿性工资：补偿相对差的工作条件<br>人力资本：教育增加了未来生产率，ROI&gt;15%<br>减少贫困：最低工资，福利，负所得税，实物转移支付  </p>
<p>消费者选择理论：预算约束线+无差异曲线(消费者偏好)<br>收入效应：无差异曲线移动<br>替代效应：沿着无差异曲线移动<br>涨工资不一定增加劳动，加息不一定增加储蓄  </p>
<p>不对称信息经济学，政治经济学，行为经济学<br>马斯洛的需求层次理论：生理，安全，社交，尊重，自我实现<br>道德风险：不受监督时做出不合意行为<br>价格左位偏差  </p>
<h2 id="宏观经济学-Macroeconomics-整体经济现象，包括通货膨胀，失业和经济增长"><a href="#宏观经济学-Macroeconomics-整体经济现象，包括通货膨胀，失业和经济增长" class="headerlink" title="宏观经济学(Macroeconomics): 整体经济现象，包括通货膨胀，失业和经济增长"></a>宏观经济学(Macroeconomics): 整体经济现象，包括通货膨胀，失业和经济增长</h2><p>国内生产总值GDP(Gross Domestic Product)：某一时期内一国生产的所有最终物品与服务的市场价值<br>二手市场不算GDP<br>中国10万亿美元<br>国民生产总值GNP(Gross National Product)<br>GDP=消费+投资(设备建筑物)+净出口+政府购买<br>名义GDP：当年价格计算；真实GDP：基年价格计算<br>GDP平减指数=名义GDP/真实GDP*100，反映物价水平<br>通货膨胀率=平减指数的增长率  </p>
<p>消费物价指数CPI(Consumer Price Index)：普通消费者购买的物品与服务的总费用的衡量指标<br>根据权重确定一篮子物品与服务，找出每年价格，计算费用，选择基年计算CPI<br>生产物价指数PPI(Producer Price Index)<br>通货膨胀率=CPI的增长率，用于校正经济变量<br>费雪效应：真实利率=名义利率-通货膨胀率，表示实际购买力增加  </p>
<p>生产率由物质资本，人力资本，自然资源，技术知识决定<br>提高生产率：增加储蓄，引进外资，教育，维护产权和政治稳定<br>资本边际收益递减  </p>
<p>金融学：如何配置资源和应对风险<br>金融体系：将储蓄和投资相匹配的一组机构<br>金融市场：储蓄者直接投资给借款者，债券市场+股票市场(预期的盈利性)<br>标准普尔500指数，道·琼斯工业平均指数30<br>市盈率P/E：股价/每股收益，一般为15<br>金融中介机构：储蓄者间接投资给借款者，银行+共同基金<br>可贷资金市场：真实利率-可贷资金量，储蓄为供给，投资为需求<br>金融危机：资产价格下跌，金融机构破产<br>贴现：用货币终值算现值<br>效用：随着财富增加的满足程度，边际效用递减<br>保险：把风险分摊<br>失业率=失业数/劳动力(就业者+失业者)数<br>劳动力参工率=劳动力/成年人口<br>大多数失业是短期的，但任何一个时间段的大多数失业是长期的<br>摩擦性失业：需要时间寻找工作<br>结构性失业：工资高于均衡工资引起劳动力过剩  </p>
<p>资产&gt;货币&gt;通货<br>货币：相互购买物品与服务的一种资产。交换媒介，计价单位，价值储藏手段<br>商品货币：本身有内在价值，黄金<br>法定货币：没有内在价值<br>通货(currency，现金)：流通的钞票和铸币<br>货币存量指标<br>M1：通货+活期存款<br>M2：M1+定期存款+基金<br>中央银行：调节经济中的货币量(向社会买卖国债，调节向银行贷款的贴现率，银行间贷款的基准利率，准备金率)<br>准备金：银行得到但没有贷出的存款<br>货币乘数：银行体系用1美元准备金产生的货币量，等于准备金率倒数<br>杠杆率：总资产/自有资本。总资产升/贬值a%，自有资本升/贬值a*杠杆率%<br>挤兑：大量提取存款<br>货币数量论：货币量决定通货膨胀<br>名义变量：按货币单位衡量；真实变量：去掉通货膨胀，按实物单位衡量<br>货币量*货币流通速度=物价*产量，货币流通速度和产量基本不变，所以货币量决定物价  </p>
<p>净出口，贸易余额(物品与服务)：出口值-进口值<br>资本净流出(资本)：本国居民购买外国资产-外国居民购买本国资产<br>净出口=资本净流出<br>国际收支=净出口-资本净流出<br>封闭经济：储蓄=国内投资<br>开放经济：储蓄=国内投资+资本净流出<br>购买力平价：一单位通货能在所有国家买到等量物品，买到相同物品的货币购买力相同<br>名义汇率(Exchange Rate)=相同物品价格之比，真实汇率不变<br>套利：利用不同市场同一物品的差价赚钱<br>外汇市场：真实汇率-用于兑换外国通货的本国货币量，资本净流出是本国货币供给，净出口是本国货币需求<br>购买力平价是外汇市场的特例：货币需求曲线水平<br>资本净流出连接了可贷资金市场和外汇市场<br>资本外逃：利率上升，货币贬值<br>中国鼓励资本外流引起人民币贬值，刺激出口，提高国内生产和就业水平，导致美国贸易赤字  </p>
<p>衰退(Recession)：物品与服务过剩，削减生产，收入下降，失业增加，严重为萧条(Depression)<br>古典宏观经济学假设货币中性(名义和真实)，适用于长期经济而不适用于短期经济<br>短期经济波动(周期)无规律<br>总需求曲线：物价水平-产量，向下倾斜，消费投资政府购买净出口决定<br>总供给曲线：物价水平-产量，长期中垂直，短期向上倾斜，生产率决定<br>长期中，技术进步引起总供给增加，货币供给增加引起总需求增加，导致持续的产量增加和通货膨胀<br>滞胀：产量减少+通货膨胀<br>流动性偏好理论：利率调整使货币供求平衡，利率增加总需求减少<br>财政政策：政府支出和税收水平<br>菲利普斯曲线：通货膨胀率-失业率  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暑假读了哈佛大学经济学教授Gregory N. Mankiw的《经济学原理》，全套上下册十分系统地阐述了微观经济学与宏观经济学的基本内容和框架，并且带有许多现实中的新闻摘录和例子，对初学者非常友好。这里主要以重要知识点的形式呈现。&lt;/p&gt;
&lt;h2 id=&quot;经济学十大原理&quot;&gt;
    
    </summary>
    
      <category term="Economy" scheme="http://cheesehigh.com/categories/Economy/"/>
    
    
  </entry>
  
  <entry>
    <title>极简版希腊神话</title>
    <link href="http://cheesehigh.com/2016/12/31/greekmyth/"/>
    <id>http://cheesehigh.com/2016/12/31/greekmyth/</id>
    <published>2016-12-31T07:59:59.000Z</published>
    <updated>2017-01-01T09:17:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>大四在新东方学习GRE时，老师总会在课堂上通过希腊神话讲词根词源，我听了十分感兴趣，可以说希腊文明是西方文明的发源地，后来就找来了BBC拍的纪录片”诸神之战” (Clash of the Gods)。这部纪录片一共有10集，每集讲述一个希腊神话和北欧神话中的标志性人物，并联系史实试图解释这些神话产生的原因。希腊神话一个比较鲜明的特点是神的数量众多，且情感和行动和人非常相似。</p>
<p>全剧贯穿了两个中心思想：</p>
<p><strong>1. 神也不能违背命运。</strong><br><strong>2. 神话是现实的反映。</strong></p>
<p><strong>故事是这样的</strong></p>
<p>大地女神盖亚(Gaia)无性繁殖了天空之神乌拉诺斯(Uranus, 第一代天神)，母子乱伦生了十二个泰坦巨人(包括克洛诺斯，瑞亚和普罗米修斯)，三个独眼巨人和三个百臂巨人。</p>
<p>泰坦巨人克洛诺斯(Kronos, 第二代天神)和瑞亚(Rhea)生了奥林匹亚诸神(包括宙斯Zeus，海神波塞冬Poseidon，地狱冥神哈迪斯Hades，德墨忒尔Demeter，赫拉Hera)，克洛诺斯为了不被儿女夺权而吞了他们，但是宙斯被偷偷藏在克里特岛，长大以后和奥林匹亚诸兄弟姐妹，独眼巨人，百臂巨人弑父夺权。他与波塞冬和哈迪斯抽签分工，最终宙斯成为第三代天神，波塞冬成为海神，哈迪斯成为地狱冥神。</p>
<p>宙斯是个淫棍，虽和赫拉结婚但还是四处留情，生了许多孩子，包括阿波罗(Appollo)，赫拉克勒斯(Hercules)，后来遇到政变，罚阿波罗和波塞冬造特洛伊城墙。</p>
<p>普罗米修斯(Prometheus)与雅典娜(Athena)创造人类，普罗米修斯为人类偷火，被宙斯锁在高加索山上，并把潘多拉送给人类作为惩罚(雅典娜没给她智慧)，之后宙斯送给潘多拉一个盒子(Pandora’s box)。</p>
<p>赫拉克勒斯是宙斯和别人的孩子，因此与赫拉敌对，受其影响杀了妻子，并完成12个任务而救赎，打开了直布罗陀海峡，烧死升天成为神。</p>
<p>阿特拉斯(Atlas)在世界尽头背着世界。</p>
<p>冥神哈迪斯掌管地狱(塔尔塔洛斯, Tartarus)，绑架了丰收之神德墨忒尔的女儿泊尔塞福涅(Persephone)，有时归还，从此有了四季。地狱里有三头狗(Cerberus)，百臂巨人(hundred-handers)，死神(Charon)，要在死者嘴里放硬币当渡河费。西西弗斯欺骗死亡，被罚推石头。俄耳甫斯想用音乐救妻子返回人间，但规定走回人间的行程中不准回头，可惜他忍不住回头了。</p>
<p>弥诺陶洛斯(Minotaur)，波塞冬惩罚克里特国王，让王后和公牛交配所生。关在迷宫中，吃雅典的人祭，被忒休斯(Theseus)所杀，但他回程时忘记与父王的约定，没有升起白帆以示胜利，父王以为忒休斯死亡便跳进爱琴海。</p>
<p>美杜莎(Medusa)，看见就石化，原是雅典娜的祭司，被波塞冬强奸，反而被雅典娜惩罚变成怪物。玻耳修斯(Perseus, 宙斯的儿子)的母亲被强行结婚，玻耳修斯杀了美杜莎来救母亲。</p>
<p>伊利亚特(Iliad)讲阿喀琉斯十年特洛伊战争，奥德赛(Odyssey)讲奥德修斯返乡的故事。</p>
<p>斯堪的纳维亚半岛的贝奥武甫(Beowulf)到丹麦杀了格伦德尔(Grendel)和他母亲，回基特兰杀退瑞典人，杀火龙。</p>
<p>北欧神话战神奥丁(Odin)，儿子雷神托尔(Thor)，兄弟洛基(Loki, 在漫威宇宙中成了托尔的兄弟)。神话反映了和基督教的斗争。诸神的黄昏是北欧神话中的一连串巨大劫难，包括造成许多重要神祇死亡的大战（奥丁、索尔、弗雷、海姆达尔、火巨人、霜巨人、洛基等），无数的自然浩劫，之后整个世界沉没在水底。然而最终世界复苏了，存活的神与两名人类重新建立了新世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大四在新东方学习GRE时，老师总会在课堂上通过希腊神话讲词根词源，我听了十分感兴趣，可以说希腊文明是西方文明的发源地，后来就找来了BBC拍的纪录片”诸神之战” (Clash of the Gods)。这部纪录片一共有10集，每集讲述一个希腊神话和北欧神话中的标志性人物，并联
    
    </summary>
    
      <category term="History" scheme="http://cheesehigh.com/categories/History/"/>
    
    
  </entry>
  
  <entry>
    <title>《鸟哥的Linux私房菜》 Reading Notes</title>
    <link href="http://cheesehigh.com/2016/12/31/linux/"/>
    <id>http://cheesehigh.com/2016/12/31/linux/</id>
    <published>2016-12-31T04:30:39.000Z</published>
    <updated>2016-12-31T05:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于本科专业的课程设置非常不合理(存在着地理信息系统、RFID传感器等看似很重要但老师自己也不懂上得无比水和烂的课，我认为即使是物联网工程专业也应当重视计算机的基础课)，无奈只能自己买书来自学，技术的同学不熟悉Linux简直是寸步难行。这里分享一下《鸟哥的Linux私房菜》的读书笔记，内容主要以重要知识点的形式呈现。</p>
<ul>
<li><p>计算机五大单元</p>
<ul>
<li>输入单元</li>
<li>输出单元</li>
<li>CPU控制单元</li>
<li>CPU运算逻辑单元</li>
<li>内存</li>
</ul>
</li>
<li><p>服务器的设计目的是稳定不死机</p>
</li>
<li><p>硬盘和速度用十进制</p>
</li>
<li><p>主板</p>
<ul>
<li>连接各个组件，有芯片组，电池，BIOS</li>
<li>Intel：北桥连接CPU、内存、显卡，南桥连接硬盘、USB、网卡</li>
<li>北桥总线为系统总线，南桥总线为输入输出总线</li>
<li>AMD：将内存集成进CPU</li>
</ul>
</li>
<li><p>CPU</p>
<ul>
<li>不同CPU有不同的指令集，代表着不同技能</li>
<li>两种CPU<ul>
<li>精简指令集RISC：IBM的ARM系列，用于手机</li>
<li>复杂指令集CISC：Intel、AMD的x86系列，用于PC</li>
</ul>
</li>
<li>主频=外频*倍频</li>
<li>CPU位数为每次能够处理的数据量（字组大小）</li>
</ul>
</li>
<li><p>内存</p>
<ul>
<li>使用DRAM</li>
<li>双通道设计将两个内存集合在一起</li>
<li>SRAM为CPU中的缓存（cache）</li>
</ul>
</li>
<li><p>显卡（VGA，Video Graphics Array）</p>
<ul>
<li>颜色占用显存</li>
<li>内嵌GPU进行3D加速</li>
</ul>
</li>
<li><p>操作系统</p>
<ul>
<li>内核：驱动硬件，资源分配，进程管理，内存管理，文件管理</li>
<li>系统调用：调用内核</li>
<li>应用程序在操作系统提供的接口上开发</li>
</ul>
</li>
<li><p>历史</p>
<ul>
<li>Multics</li>
<li>Unics</li>
<li>Unix(Ken Thompson, Dennis Ritchie from AT&amp;T’s Bell Lab)</li>
<li>System V &amp; BSD(Berkeley Software Distribution)</li>
<li>Posix Standards</li>
<li>Unix收回版权</li>
<li>Minix</li>
<li>Linux</li>
<li>Mac OS X 基于 Free BSD</li>
<li>Android 基于 Linux</li>
</ul>
</li>
<li><p>每一个设备为文件</p>
</li>
<li>磁盘每个扇区（非扇形）大小为512B，扇区组成的圆形为磁道，所有盘片的磁道组成柱面，以柱面号来分区</li>
<li>第一个扇区包含：主引导分区MBR（Master Boot Record）和分区表</li>
<li>分区表：主分区+扩展分区（包含逻辑分区），最多4个</li>
<li>开机先启动BIOS，再找到MBR启动引导加载程序（boot loader），启动操作系统</li>
<li>其他分区有引导扇区（boot sector），启动引导加载程序（多重引导）</li>
<li>挂载：目录树和文件系统的关联</li>
<li><p>swap：内存不够，将不常使用的放到硬盘中</p>
</li>
<li><p>文件权限</p>
<ul>
<li>chgrp</li>
<li>chown</li>
<li>chmod</li>
<li>user, group, others, all</li>
<li>rwx</li>
</ul>
</li>
<li><p>目录配置</p>
<ul>
<li>Filesystem Hierarchy Standard：是否可分享，是否可变</li>
<li>/：根目录，系统文件</li>
<li>/usr：UNIX Software Resource，软件</li>
<li>/var：系统运行，数据库</li>
</ul>
</li>
<li><p>which：查找PATH中的执行文件</p>
</li>
<li>whereis,locate：查找数据库中的文件，快</li>
<li>find：查找硬盘中的文件，慢</li>
<li><p>find . -name ‘file’</p>
</li>
<li><p>文件系统</p>
<ul>
<li>Ext2</li>
<li>boot sector</li>
<li>block group</li>
<li>super block：文件系统整体信息</li>
<li>inode：文件（文件属性与文件block号，每个文件对应一个inode），目录（目录属性与目录block号）</li>
<li>block：文件（内容），目录（文件名和文件inode号）</li>
<li>df：查询磁盘使用量</li>
<li>du：查询目录的磁盘使用量</li>
<li>分区（fdisk）-&gt;格式化，创建文件系统（mkfs）-&gt;挂载目录（mount）</li>
<li>硬连接（ln）：不同目录block指向同一个文件的inode</li>
<li>符号连接（ln -s）：指向目录的inode</li>
</ul>
</li>
<li><p>压缩和打包</p>
<ul>
<li>gzip: file.gz</li>
<li>bzip2: file.bz2</li>
<li>打包压缩: tar -zcvf file.tar.gz(tgz)</li>
<li>解压缩包: tar -zxvf file.tar.gz</li>
<li>dump: 备份文件系统或目录</li>
<li>restore: 还原备份</li>
</ul>
</li>
<li><p>vim</p>
<ul>
<li>vim是vi的高级版，带有颜色便于编辑程序</li>
<li>一般模式-&gt;ioa(插入)r(替换)-&gt;编辑模式</li>
<li>一般模式-&gt;:,/,?-&gt;命令行模式</li>
<li>ctrl+f：向下翻页</li>
<li>ctrl+b：向上翻页</li>
<li>0：本行开头</li>
<li>$：本行末尾</li>
<li>G：最后一行</li>
<li>nG：第n行</li>
<li>gg：第一行</li>
<li>dd：删除整行</li>
<li>nyy：复制n行</li>
<li>p：粘贴</li>
<li>u：撤销</li>
<li>ctrl+r：重做</li>
<li>ctrl+v：块选择</li>
<li>/word：向下寻找word，用n向下查找</li>
<li>?word：向上寻找word，用N向上查找</li>
<li>:1,$s/word1/word2/g：从开头到末尾用word2替换word1</li>
<li>:set nu：显示行号</li>
<li>:sp file：多窗口</li>
<li>ctrl+w+上/下：多窗口切换</li>
</ul>
</li>
<li><p>shell</p>
<ul>
<li>操作系统内核给用户的接口</li>
<li>bash：Linux的一种标准shell</li>
<li>type：判断是否是bash内置命令</li>
<li>pwd：当前目录</li>
<li>env：查看环境变量</li>
<li>cd：直接回到用户主文件夹</li>
<li>alias ll=’ls -al –color=auto’</li>
<li>自定义变量不能在子进程中使用，环境变量能在子进程中使用</li>
<li>export VAR：使自定义变量VAR成为环境变量</li>
<li>/etc/profile：全局环境配置文件</li>
<li>~/.bashrc：用户环境配置文件</li>
<li>变量=$(命令)</li>
<li>变量=$((算式))</li>
<li>ctrl+d：结束输入(EOF)</li>
<li>ctrl+c：中止命令</li>
<li>ctrl+u：删除命令</li>
<li>ctrl+a：移到开头</li>
<li>ctrl+e：移到末尾</li>
<li>数据流重定向<ul>
<li>stdin：0，&lt;(由文件代替键盘输入)，&lt;&lt;(结束输入符)</li>
<li>stdout：1，&gt;(覆盖)，&gt;&gt;(累加)</li>
<li>stderr：2，&gt;(覆盖)，&gt;&gt;(累加)</li>
</ul>
</li>
<li>; 连续命令</li>
<li>$? 回转码，上个命令执行成功则为0</li>
<li>cmd1 &amp;&amp; cmd2：cmd1成功则执行cmd2</li>
<li>cmd1 || cmd2：cmd1失败则执行cmd2</li>
<li>管道命令(仅处理stdout)</li>
<li>cat file | grep ‘word’</li>
<li>grep ‘word’ file：取出整行</li>
<li>cut：行内分割</li>
<li>sed：行增删改</li>
<li>awk：行内字段处理</li>
</ul>
</li>
<li><p>通配符</p>
<ul>
<li>? 任意一个字符</li>
<li>* 0到无穷个字符</li>
<li>[] 字符集合</li>
<li>[-] 连续字符</li>
<li>[^] 反向选择</li>
</ul>
</li>
<li><p>正则表达式(Regular Expression, RE, RegEx)</p>
<ul>
<li>处理字符串的一种标准依据</li>
<li>元字符</li>
<li>[:alnum:] 字母+数字</li>
<li>[:alpha:] 字母</li>
<li>[:upper:] 大写字母</li>
<li>[:lower:] 小写字母</li>
<li>[:digit:] 数字</li>
<li>[] 字符集合表示一个字符</li>
<li>() 字符分组表示一组字符</li>
<li>[^] 反选</li>
<li>^ 行首</li>
<li>$ 行尾</li>
<li>. 任意一个字符</li>
<li>\w 任意一个字母，数字，下划线，汉字</li>
<li>\s 空格</li>
<li>\d 数字</li>
<li>\b 单词开始或结束</li>
<li>大写为反选</li>
<li>c* 0到无穷多个的c</li>
<li>c+ 1到无穷多个的c</li>
<li>c? 0个或1个c</li>
<li>c{5} 5个c</li>
<li>c{2,5} 2到5个c</li>
<li>| 或</li>
</ul>
</li>
</ul>
<ul>
<li>shell script<ul>
<li>#!/bin/bash 声明使用的shell名称</li>
<li>#注释</li>
<li>sh -n：检查语法</li>
<li>sh -x：调试执行过程</li>
<li>test 测试命令</li>
<li>-e 是否存在</li>
<li>-f 是否存在且为文件</li>
<li>-d 是否存在且为目录</li>
<li>$0 文件名</li>
<li>$1, $2… 命令参数 </li>
<li>条件判断</li>
<li>函数(放在脚本最前面)</li>
<li>循环</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ condition ]; then</div><div class="line">elif [ condition ]; then</div><div class="line">else</div><div class="line">fi</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">case $1 in</div><div class="line">     &quot;&quot; )</div><div class="line">          ;;</div><div class="line">     * )</div><div class="line">          ;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function fname () &#123;</div><div class="line">     直接使用形参$1, $2...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">while/until [ condition ]</div><div class="line">do</div><div class="line">done</div><div class="line">for var in ...</div><div class="line">do</div><div class="line">done</div></pre></td></tr></table></figure>
<ul>
<li>用户账号UID /etc/passwd</li>
<li>用户组GID /etc/group</li>
<li>密码 /etc/shadow</li>
<li>访问控制列表(Access Control List)：对单个用户或用户组进行权限管理</li>
<li>sudo：让/etc/sudoers中的用户仅通过自己的密码进行其他用户的操作</li>
<li>磁盘Quota：公平分配磁盘给用户，soft-&gt;gracetime-&gt;hard</li>
<li>Redundant Arrays of Inexpensive Disks：根据性能和备份有不同等级</li>
<li>Logical Volume Manager逻辑卷管理器：弹性调整文件系统容量</li>
<li><p>日志文件：/var/log</p>
</li>
<li><p>例行性工作</p>
<ul>
<li>at：一次</li>
<li>crontab：循环</li>
<li>crontab -e</li>
<li>分 时 日 月 周 命令</li>
<li>日月和周不可并存</li>
</ul>
</li>
<li><p>进程管理</p>
<ul>
<li>硬盘程序加载到内存中为进程PID</li>
<li>父进程PPID-&gt;fork-&gt;exec-&gt;子进程</li>
<li>daemon(守护进程，系统服务)：常驻内存的进程</li>
<li>standalone+super daemon</li>
</ul>
</li>
<li><p>单一终端机的工作管理</p>
<ul>
<li>command &amp;：放到后台运行</li>
<li>ctrl+z：放到后台暂停</li>
<li>jobs：查看后台工作</li>
<li>fg：后台工作拿到前台运行</li>
<li>bg：让后台工作继续运行</li>
<li>kill -1 PID：重启</li>
<li>kill -9 PID：强制中止</li>
<li>kill -15 PID：正常结束</li>
<li>ps -l：自己的进程</li>
<li>ps aux：所有系统进程</li>
<li>top：动态查看进程变化，P以CPU排序，M以内存排序</li>
<li>进程优先级PRI = PRI +nice</li>
<li>netstat：网络状态</li>
<li>ifconfig：查询IP</li>
<li>whois：域名所有者信息</li>
<li>host：DNS服务器</li>
<li>nslookup：域名解析</li>
<li>SELinux(Security Enhanced Linux)：避免主体进程误用目标资源</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于本科专业的课程设置非常不合理(存在着地理信息系统、RFID传感器等看似很重要但老师自己也不懂上得无比水和烂的课，我认为即使是物联网工程专业也应当重视计算机的基础课)，无奈只能自己买书来自学，技术的同学不熟悉Linux简直是寸步难行。这里分享一下《鸟哥的Linux私房菜》
    
    </summary>
    
      <category term="Tech" scheme="http://cheesehigh.com/categories/Tech/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP Reading Notes</title>
    <link href="http://cheesehigh.com/2016/12/31/csapp/"/>
    <id>http://cheesehigh.com/2016/12/31/csapp/</id>
    <published>2016-12-30T16:04:44.000Z</published>
    <updated>2016-12-31T03:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下我在上CMU的18-600: Foundations of Computer Systems (15-213: Introduction to Computer Systems在ECE系的改编课程)时对教材”Computer Systems: A Programmer’s Perspective” (CSAPP)的读书笔记，内容按照原书章节组织，主要以重要知识点的形式呈现。</p>
<h3 id="A-Tour-of-Computer-Systems"><a href="#A-Tour-of-Computer-Systems" class="headerlink" title="A Tour of Computer Systems"></a>A Tour of Computer Systems</h3><ul>
<li>Information = bits + context</li>
<li>Compilation system<ul>
<li>Pre-processor: add head file to source file, program.i</li>
<li>Compilation: translate source file into assembly language, program.s</li>
<li>Assembly: translate assembly language into relocatable object file, program.o</li>
<li>Linking: link all relocatable object program to executable object file, program</li>
</ul>
</li>
<li>GNU provides environment tools for Linux</li>
<li>Virtual Memory(virtual address space): program-runtime heap-shared libraries-stack-kernel</li>
<li>multiprocessor: multi-cores + hyperthread</li>
</ul>
<h3 id="Representing-and-Manipulating-Information"><a href="#Representing-and-Manipulating-Information" class="headerlink" title="Representing and Manipulating Information"></a>Representing and Manipulating Information</h3><ul>
<li>little endian: less significant bytes in low address; big endian: more significant bytes in low address</li>
<li>typedef unsigned char *byte_pointer: type alias</li>
<li>Bit Operation: ~ NOT; ^ Exclusive OR</li>
<li>Logic Operation(&amp;&amp;, ||, !): Any non-zero parameter = 1</li>
<li>Sign bit =-2^w-1</li>
<li>Signed &lt;-&gt; Unsigned: Bit pattern do not change, +/- 2^w</li>
<li>Signed mixed with unsigned: signed -&gt; unsigned</li>
<li>Pay attention to Tmin and 0</li>
<li>Java only supports signed integer</li>
<li>Two’s Complement = Signed = 补码; Addition = Bit addition + truncating</li>
<li>Multiplication is costly, use shift + addition/substraction</li>
<li>Unsigned Division: right logic shift; Two’s Complement Division: right arithmetic shift</li>
<li>IEEE floating point = (-1)^s <em> M(frac) </em> 2^E(exp), need approximation and round</li>
<li>Normalized: exp != all 0 &amp;&amp; exp !=all 1: E = exp - bias(2^k-1 - 1); M = 1 + .frac;</li>
<li>Denormalized: exp == all 0: E = 1- bias; M = .frac;</li>
<li>Special value: exp == all 1: Inf(frac = all 0, should be set to 0); NaN(frac != 0)</li>
<li>In the half, round to even</li>
<li>unsigned int a = 15213U;</li>
<li>long: 4 Bytes(32 bit); 8 Bytes(64 bit)</li>
<li>size_t: unsigned int(32 bit); long unsigned int(64 bit)</li>
</ul>
<h3 id="Machine-Level-Representation-of-Programs"><a href="#Machine-Level-Representation-of-Programs" class="headerlink" title="Machine-Level Representation of Programs"></a>Machine-Level Representation of Programs</h3><ul>
<li>gcc -O1(optimization level) -g(source code line) -o(compile stage) p p1.c p2.c</li>
<li>objdump -d program.o: disassembler generate assembly code from object code</li>
<li>Assembly Language: AT&amp;T Format(-&gt;) V.S. Intel Format(&lt;-)</li>
<li>byte(b): 8 bits; word(w): 16 bits; long word(l): 32 bits; quad word(q): 64 bits</li>
<li>Register: %rax(64)-%eax(32)-%ax(16)-%ah(15-8)-%al(7-0)</li>
<li>ax, cx, dx(caller-save); bx, si, di(callee-save): generally purpose; sp: stack pointer; bp: frame pointer</li>
<li>$immediate, %Register, disp(base, index*scale)</li>
<li>SUB src, dst: dst - src -&gt; dst</li>
<li>64-bit Multiply: imull src: src * %eax -&gt; %edx:%eax</li>
<li>64-bit Divide: idivl src: %edx:%eax / src -&gt; %eax, %edx:%eax mod src -&gt; %edx</li>
<li>cltd: %eax -&gt; %edx:%eax</li>
<li>SAL(Arithmetic Left); SHL(Logical Left); SAR(Arithmetic Right); SHR(Logical Right)</li>
<li>condition codes: ZF(zero); SF(negative); OF(signed overflow); CF(unsigned overflow)</li>
<li>cmp s2,s1: s1-s2(set condition codes then); set dst; jmp label/*address; signed(g/l); unsigned(a/b)</li>
<li>if-else: jmp label; loop: label; jmp label; switch: jump table contains address</li>
<li>conditional expression: cmov, conditional move, compute all first, better performance than conditional control for pipeline misprediction</li>
<li>procedure(stack frame): (caller)local var, params, return addr, (callee)bp(higher), local var, sp(lower)</li>
<li>Array: contiguous memory, address +/- with data type</li>
<li>Union: Store one field at a time, referenced by data type</li>
<li>Alignment: data address must be multiple of its size</li>
<li>x86-64: IA64-AMD64-Intel64: six parameters by ordered register(di,si,dx,cx,r8,r9), no %bp</li>
<li>Buffer overflow attack: strcpy to inject instructions and change return address</li>
<li>struct member address must align</li>
</ul>
<h3 id="Processor-Architecture"><a href="#Processor-Architecture" class="headerlink" title="Processor Architecture"></a>Processor Architecture</h3><ul>
<li>Y86: Balance between CISC and RISC</li>
<li>F: No register</li>
<li>HCL(Hardware Control Language): Describe control logic circuit</li>
<li>bool out = f(logic operator);</li>
<li>multiplexor(output one of the inputs): int out = [s in {I}:A; 1:B];</li>
<li>clocked registers: state = output, update when clock rise</li>
<li>random-access memories: given address, register file</li>
<li>SEQ(Sequential) Processor: Serve one instruction until it finishes</li>
<li>Instruction stage: fetch-decode-execute-memory-write back(register)-PC update</li>
<li>Every instruction uses one clock cycle. As clock rises, state elements(PC, CC, register file, RAM) updated according to the previous instruction. In the clock cycle, combinational logic propagate to create new value for state elements updated in next clock rise</li>
<li>Slow: Each hardware unit is only active for a fraction of the clock cycle</li>
<li>Pipelined Processor: One instruction finished this stage will move on to next, next instruction will come</li>
<li>throughput = 1 / clock period(stage + pipeline register)</li>
<li>The former instruction move on, the address of next instruction(new PC) must be predicted</li>
<li>instruction dependency hazard(data + control): stalling + forwarding + both(load interlock)</li>
<li>SEQ+: move PC update to the beginning</li>
<li>PIPE-: insert pipeline regisger(before the corresponding stage)</li>
<li>PIPE: forward logic in decode stage</li>
<li>Exception Handling: stat field in pipeline register</li>
<li>CPI = 1 + Cbubble/Cinstuction = 1 + load/use + mispredict + ret</li>
<li>Branch Target Buffer for dynamic branch prediction: previous instruction addr -&gt; target addr</li>
<li>Register Rename: small architecture regs -&gt; large physical regs, ARF -&gt; RRF</li>
<li>Load Bypassing: load ahead of store; Load Forwarding: forward store to load</li>
</ul>
<h3 id="Optimizing-Program-Performance"><a href="#Optimizing-Program-Performance" class="headerlink" title="Optimizing Program Performance"></a>Optimizing Program Performance</h3><ul>
<li>Efficient algorithm and data structure</li>
<li>Compiler can optimize</li>
</ul>
<ol>
<li>Correctness</li>
<li>Readability </li>
<li>Performance</li>
</ol>
<ul>
<li>Trade-off between readability and performance</li>
<li>Loop Unrolling: Reduce iteration and loop operation</li>
</ul>
<h3 id="The-Memory-Hierarchy"><a href="#The-Memory-Hierarchy" class="headerlink" title="The Memory Hierarchy"></a>The Memory Hierarchy</h3><ul>
<li>Register -&gt; N-level Cache -&gt; Main Memory -&gt; Local Disk -&gt; Remote Disk</li>
<li>RAM: available when power on</li>
<li>one bit = one cell</li>
<li>SRAM(Static): Cache; bistable, 6 transistors per bit</li>
<li>DRAM(Dynamic): Main Memory; Sensitive, 1 transistor per bit</li>
<li>Memory controller with addr and data pins</li>
<li>Main Memory -&gt; Memory Modules -&gt; DRAM Chips -&gt; Supercells(row,column) -&gt; 8 cells(1 byte) </li>
<li>SDRAM: Synchronous DRAM, replace memory control with clock rise</li>
<li>DDR(Double Data Rate): Double control signal and increase buffer</li>
<li>ROM: nonvolatile when power off, limited erase time</li>
<li>EEPROM(Electrically Erasable Programmable ROM): Flash Memory, Solid State Disk</li>
<li>CPU - Bus Interface - System Bus - I/O Bridge - Memory Bus - Main Memory<br>I/O Bridge - I/O Bus(Peripheral Component Interconnect)</li>
<li>Universal Serial Bus(SSD), Host Bus Adaptor(SCSI, SATA)</li>
<li>sector + gap -&gt; track -&gt; cylinder &lt;=&gt; Logic Block</li>
<li>RPM: Revolutions Per Minute</li>
<li>Access Time = avg seek time + avg rotation latency + avg transfer time</li>
<li>Temporal Locality: reference itself; Spatial Locality: reference nearby location</li>
<li>Cache: S sets -&gt; E lines -&gt; 1 valid bit + t tag bits + B bytes block; C= BES</li>
<li>Memory Address: t bits tag + s bits set index + b bits block offset</li>
<li>Direct Mapped Cache(E=1); E-way Set Associative Cache(1&lt;E&lt;ES); Fully Associative Cache(S=1)</li>
<li>(valid == 1 &amp;&amp; tag match) ? hit : miss;</li>
<li>Miss: Fetch entire block from memory to cache line</li>
<li>Cold Miss, Conflict Miss, Capacity Miss</li>
<li>Memory Mountain: read throughput = f(size(temporal locality),stride(spatial locality))</li>
</ul>
<h3 id="Linking"><a href="#Linking" class="headerlink" title="Linking"></a>Linking</h3><ul>
<li>Collect and combine code and data into a single file that can be loaded into memory and executed</li>
<li>Linker enables separate complition, link at (static linker)compile time, (dynamic linker)load time, run time</li>
<li>Symbol resolution</li>
<li>Symbol: variables + functions</li>
<li>static: local symbol; nonstatic: global symbol defined by self; external: global symbol defined by others</li>
<li>strong symbol: initialized global variable and function; weak symbol: uninitialized global variable</li>
<li>strong with strong: link error; strong with weak: pick strong; weak with weak: pick any one</li>
<li>static library: lib.a(archive), only copy the object modules that are referenced</li>
<li>E: object file; U: undefined symbol; D: defined symbol</li>
<li>scan object file and static library in order and update E, U, D</li>
<li>Referenced file should after file that reference it</li>
<li>Relocation: section merge + relocate symbol reference within section</li>
<li>Load executable object file: copying the program into memory and then running</li>
<li>Shared library: dynamic link at run time, lib.so</li>
<li>dynamic link in program: handle = dlopen(lib.so); func = dlsym(handle,”func”); dlclose(handle)</li>
<li>Position Independent Code: distance between code segment and data segment is constant</li>
<li>Global Offset Table + Procedure Linkage Table</li>
</ul>
<h3 id="Exceptional-Control-Flow"><a href="#Exceptional-Control-Flow" class="headerlink" title="Exceptional Control Flow"></a>Exceptional Control Flow</h3><ul>
<li>Control Flow: Sequence of control transfer</li>
<li>Sychronous: Call return only if it finished; Asynchronous: Call return immediately and notify later if finish</li>
<li>Exception: OS and hardware(low-level), interrupt(I/O device, Processor issue to OS), trap, fault, abort</li>
<li>Event occur -&gt; exception -&gt; exception table -&gt; exception handler(kernel mode) -&gt; return/abort</li>
<li>System Call(trap, 0x80 in exception table): syscall, Application call OS<br>Fault(might recoverable)</li>
<li>Floating Exception: Divide by 0; Segmentation Fault: Access undefined address and write read-only file</li>
<li>Program: a collection of code and data</li>
<li>Process: Instance of a program in execution, illusion that has exclusive use of processor and memory</li>
<li>Process need context switching when exception occur, threads are in the same context</li>
<li>3 states of process: Running, Stopped, Terminated</li>
<li>fork(): parent -&gt; child, return child pid to parent and 0 to child, parent reap its terminated child(zombie)</li>
<li>pid waitpid(pid,status,option): waits children to terminate or stop and reap them</li>
<li>execve(filename,argv,envp): loads and runs a new program in the context of the current process</li>
<li>fork: new process, same program; execve: same process, new program</li>
<li>Signal: Application and OS(high-level), kernel notify process that event occur</li>
<li>block(can be deliver until unblock) - pending(only one for one type) - receive</li>
<li>process group: -PID</li>
<li>signal(signum,handler): install user-defined handler for handling received signal</li>
<li>Nonlocal jumps: jump to other function, setjmp(like catch) + longjmp(return setjmp, like throw)</li>
</ul>
<h3 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h3><ul>
<li>Physical Addressing(PA): 0~M-1, m bits; Virtual Addressing(VA): 0~N-1, n bits<br>Memory Management Unit(MMU) translate VA to PA</li>
<li>Cache Transfer Unit: page, block</li>
<li>Each process have its own virtual adress space and page table</li>
<li>Virtual Memory: Array of N contiguous byte-sized cells stored on disk</li>
<li>Unallocated(no space on disk), Cached(fully associative in physical memory), Uncached(on disk)</li>
<li>Page Table Base Register -&gt; Page Table(in cache or memory): each entry map VP to PP</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Virtual Page(VP)</th>
<th style="text-align:center">valid</th>
<th style="text-align:center">Physical Page(PP)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">        0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">physical address(cached), page hit</td>
</tr>
<tr>
<td style="text-align:center">        1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">disk address(uncached), page fault, swap/page in/out and execute again</td>
</tr>
<tr>
<td style="text-align:center">        2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">null(unallocated)</td>
</tr>
</tbody>
</table>
<ul>
<li>Demand Paging: the strategy of waiting until the last moment to swap in a page, when a miss occurs</li>
<li>Virtual Page Number -&gt; Page Table Entry -&gt; Physical Page Number</li>
<li>Virtual Page Offset = Physical Page Offset</li>
<li>Translation Lookaside Buffer: cache of page table(SRAM and DRAM) in MMU</li>
<li>Multi-level page tables: bits of (page amount) are separated into multiple sections</li>
<li>m*n PTEs are organized as m PTEs(level 1), n PTEs(level2) for each level 1 PTE, level 2 n PTEs doesn’t exist if corresponding level 1 PTE is null</li>
</ul>
<ol>
<li>VA -&gt;PA<br>hit: VPN -&gt; MMU(TLB) -&gt; PPN<br>miss: VPN -&gt; multi-level page table -&gt; PPN</li>
<li>Get data word<br>PA -&gt; Cache -&gt; Physical Memory</li>
</ol>
<ul>
<li>Linux Virtual Memory: vm_area_structs -&gt; different sections of process virtual memory</li>
<li>Memory Mapping: initialize virtual memory area by associating it with an object(shared, private copy-on-write, anonymous) on disk</li>
<li>mmap: create a new virtual memory area which mapped to a object; munmap: delete the area</li>
<li>brk: top of the heap; payload: actual requested size; bp: block pointer, the first word after header</li>
<li>void *sbrk(intptr_t incr); // set brk to grow or shrink the heap</li>
<li>void *malloc(size_t size); // allocate one size space, return null on error, not initialized</li>
<li>Notice Allocate Alignment!</li>
<li>void *calloc(size_t numElements, size_t sizeOfElement); // allocate initialized spaces </li>
<li>void <em>realloc(void </em>ptr, size_t newsize); // reallocate ptr with one newsize space, might in new location</li>
<li>void free(void* ptr); //explicitly free allocated block</li>
<li>Goal: maximize throughput(request number), maximize memory utilization(peak utilization)</li>
<li>internal fragmentation: allocated block &gt; request; external fragmentation: every free block &lt; request</li>
<li>boundary tags: copy header to footer, current block just check one previous word</li>
<li>implicit free list: start + 2 prologue + heap blocks(header + payload + padding + footer) + epilogue</li>
<li>placement, splitting, coalescing(false fragmentation, combine free blocks)</li>
<li>explicit free list: doubly linked free list; segregated free list: multiple free lists of different size</li>
<li>buddy system: segregated free list of sizes of power of two</li>
<li>new/delete: C++ operator, allocate/free self-defined object, do construction构造 &amp; deconstruction析构</li>
<li>Garbage Collection: implicitly free allocated block, directed graph(root nodes -&gt; heap nodes)</li>
<li>garbage: unreachable nodes which will never be used again</li>
<li>Mark&amp;Sweep: mark reachable blocks and sweep unmarked allocated blocks</li>
</ul>
<h3 id="System-Level-I-O"><a href="#System-Level-I-O" class="headerlink" title="System-Level I/O"></a>System-Level I/O</h3><ul>
<li>I/O: copy data between main memory and external device(disk drive, terminal, networks: file)</li>
<li>open/close file<ul>
<li>int open(filename,flags,mode); return file descriptor(fd); int close(fd);</li>
<li>unix shell begin with three descriptor: stdin, stdout, stderr</li>
</ul>
</li>
<li>read/write file<ul>
<li>read(fd,buf,size); write(fd,buf,size);</li>
<li>RIO(Robust I/O) for handling short counts(fewer bytes than request, EOF, text line, network delay)</li>
</ul>
</li>
<li>unbuffered for network delay; buffered for text line</li>
<li>buffer in memory can improve efficiency: interact with buffer directly rather than use system call every time to r/w some small bytes, buffer interact with file by buffersize at a time</li>
<li>change file position</li>
<li>file metadata: stat(filename,buf);</li>
<li>open file data structure<ul>
<li>descriptor table(unique for process) -&gt; open file table(file pos) -&gt; v-node table(file)(shared by process)</li>
</ul>
</li>
<li>I/O Redirection: int dup2(oldfd,newfd), copy descriptor table entry of oldfd to newfd</li>
<li>C Standard I/O, RIO(higher-level) - Unix I/O(lower-level, for network)</li>
</ul>
<h3 id="Network-Programming"><a href="#Network-Programming" class="headerlink" title="Network Programming"></a>Network Programming</h3><ul>
<li>client-server transaction: client process request server process, server process response client process</li>
<li>TCP/IP Protocol Stack: Application Layer - Transport Layer - Internet Layer - Network Access Layer</li>
<li>LAN: Bridged Ethernet(Host - Hub(copy every bit to every other port) - Bridge(selectively copy frame to dest))</li>
<li>internet: LAN - router(connect incompatible LANs); Global IP Internet: one implementation of internet</li>
<li>Reliable Transfer: no transfer error including lost, duplicate and wrong order</li>
<li>TCP(Transmission Control Protocol)/UDP(Unreliable Datagram Protocol): process to process</li>
<li>Three-way Handshake: SYN -&gt; SYN+ACK -&gt; ACK</li>
<li>IP(Internet Protocol): host to host(send datagrams, unreliable)</li>
<li>MAC Address: 48 bit; IP Address: 32 bit(ipv6: 16 Bytes), dotted-decimal notation; Network Byte Order: big-endian</li>
<li>unnamed root -&gt; first-level domain name(com) -&gt; second-level domain name(google) -&gt; third-level domain name(www)</li>
<li>Socket: end point of connection, IP address:port(16 bit); ephemeral port, well-known port</li>
<li>Socket Interface<ul>
<li>Client: open_clientfd(socket - connect) - I/O - close; Server: open_listenfd(socket - bind - listen) - accept - I/O - close</li>
<li>client blocks in connect, server blocks in accept</li>
<li>listening descriptor exist for lifetime of server(open_listenfd); connected descriptor exist during the connection(accept)</li>
</ul>
</li>
<li>World Wide Web is a service provided by Internet using HTTP(Hypertext Transfer Protocol)</li>
<li>MIME: Multipurpose Internet Mail Extensions</li>
<li>URI(Uniform Resource Identifier) = URL(locater) + URN(name)</li>
<li>HTTP Request Line: method URI version; HTTP Response Line: version status code status message</li>
<li>status code: 200(OK), 301(permanently redirect), 302(temporarily redirect), 403(Forbidden), 404(Not found)</li>
<li>CGI(Common Gateway Interface): interface with executable programs on a server that generate web pages dynamically</li>
<li>Proxy: bypass firewall, page translation, anonymizer, cache</li>
</ul>
<h3 id="Concurrent-Programming"><a href="#Concurrent-Programming" class="headerlink" title="Concurrent Programming"></a>Concurrent Programming</h3><ul>
<li>Processes<ul>
<li>parent forks a child to handle each new connection request, child closes listenfd, parent closes connfd</li>
<li>Interprocess Communication(IPC)</li>
<li>Pros: having separate virtual address space; Cons: difficult to share state information, high overhead</li>
</ul>
</li>
<li>I/O Multiplexing<ul>
<li>select function blocks until one of the descriptors in the read set is ready to read</li>
<li>state machine: (input state, input event) -&gt; output state</li>
<li>Pros: more control, share state information; Cons: complexity</li>
</ul>
</li>
<li>Threads(hybrid of Process and I/O Multiplexing)<ul>
<li>Like processes, threads are scheduled automatically by the kernel and are known to the kernel by an integer ID. Like I/O multiplexing, multiple threads run in the context of a single process, and thus share the entire contents of the process virtual address space, including its code, data, heap, shared libraries, and open files. Each thread has its own thread context(thread ID(TID), stack, stack pointer, program counter, general-purpose registers, condition codes)</li>
</ul>
</li>
<li>main thread(the first thread) </li>
<li>peer threads: thread can kill any of its peers or wait for any of its peers to terminate.</li>
<li>POSIX Thread: pthread, pthread_t tid</li>
<li>joinable thread(default): reaped and killed by other threads and memory resources are not freed until it is reaped by another thread; detached thread(prefer): cannot be reaped or killed by other threads and memory resources are freed automatically by the system when it terminates.</li>
<li>Global variables: one instance in virtual address space and can be referenced by any thread</li>
<li>Local automatic variables: each thread’s stack contains its own instances and can also be shared though</li>
<li>Local static variables: one instance in virtual address space and can be referenced by any thread</li>
<li>Thread safe: manipulate shared data structures by multiple threads and guarantee safe execution and correct result </li>
<li>Thread synchronization: coordinate threads to access critical section</li>
<li>Semaphore: solution to synchronization, a nonnegative global variable s</li>
<li>P(s): decrement s if s is nonzero, block if s is zero until V(s); V(s): increment s, restart one P(s) if s becomes nonzero</li>
<li>P and V cannot be interrupted: atomic operation</li>
<li>Mutual Exclusion: initialize s with 1; P(s); Do(); V(s); Only can execute Do() with THE ONE s(mutex), like talking pillow</li>
<li>Producer-Consumer Problem: Producer: P(slot)-P(mutex)-insert-V(mutex)-V(item); Consumer: P(item)-P(mutex)-remove-V(mutex)-V(slot)</li>
<li>Readers-Writers Problem: reader-favored(reader can read although writer is waiting); writer-favored(writer write as soon as possible after the previous readers finish)</li>
<li>Reader: P(mutex); readcnt++; if(readcnt == 1) {P(w);} V(mutex); Read(); P(mutex); readcnt–; if(readcnt == 0) {V(w);} V(mutex); Writer: P(w); Write(); V(w);</li>
<li>Parallel programs are often written so that each core runs exactly one thread(cat /proc/cpuinfo)</li>
<li>Reentrant function(subset of thread-safe function): do not reference any shared data</li>
<li>Deadlock: each thread is waiting for the other to do V that will never occur, because of wrong order of P and V</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一下我在上CMU的18-600: Foundations of Computer Systems (15-213: Introduction to Computer Systems在ECE系的改编课程)时对教材”Computer Systems: A Programme
    
    </summary>
    
      <category term="Tech" scheme="http://cheesehigh.com/categories/Tech/"/>
    
    
  </entry>
  
  <entry>
    <title>World Peace</title>
    <link href="http://cheesehigh.com/2016/07/07/peace/"/>
    <id>http://cheesehigh.com/2016/07/07/peace/</id>
    <published>2016-07-07T15:22:39.000Z</published>
    <updated>2016-07-13T14:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>断断续续读了2个月，毕业了，两本总共800多页的《全球通史》也读完了，还外加一些相关的纪录片和电影。</p>
<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>寒假看完了火影究极风暴4的游戏视频，重新梳理了一遍火影的世界观。大概是这样的，公主大筒木辉夜吃了查克拉树上的果子暴走变成了十尾，她的两个儿子羽衣和羽村联合封印了辉夜，之后羽衣成了六道仙人，将十尾查克拉分给了九只尾兽，他的两个儿子阿修罗和因陀罗从此拉开了千手和宇智波世世代代的羁绊与恩怨。故事的主要纷争就在于两种意识形态的对立，即怎样才能达到「和平」。佩恩、带土、斑等反派们认为只有消除现存的一切，建立一个虚幻的梦境世界，那里没有死亡，只有虚假的幸福。鸣人则认为只有相信他能够消除仇恨，冤冤相报的命运才能终结。当然最后是主角们开挂打赢了战斗，但是只要有续集，就会有斗争和仇恨，鸣人的理想只能在嘴遁上停留。</p>
<p>那么我们生活的这个世界呢？</p>
<h3 id="文明与战争"><a href="#文明与战争" class="headerlink" title="文明与战争"></a>文明与战争</h3><p>人类的文明史就是一部战争史。资源是有限的，斗争，是地球，甚至是整个宇宙的生存法则。文明的进步在给人类带来便利，对抗疾病、饥饿的同时，斗争也在不断扩大。</p>
<p>旧石器时代。人类还在用火和野兽斗争。</p>
<p>新石器时代。人类逐渐站上食物链顶端，但还零零散散地散步在世界各个角落，基本能够做到自给自足。</p>
<p>古代文明。四个文明古国开始产生，黄河流域的中国，印度河流域的印度，两河流域的巴比伦，尼罗河流域的埃及。文明的周围是野蛮。游牧民族们无时无刻不在觊觎着富庶的大国，千年不断的入侵和掠夺开始了。</p>
<p>古典文明。希腊开启了人类历史上的第一个黄金时代，但还是经历了和波斯的战争，雅典和斯巴达的内战。伟大的罗马帝国被一分为二，天主和东正为了上帝争论不休。遥远的东方相信「分久必合，合久必分」，每隔一段时间就来一次朝代更替。</p>
<p>中世纪文明。我们的穆罕穆德登场了，中东都变成了绿色，基督徒和穆斯林千年血战拉开序幕。电影《Kindom of Heaven》中的耶路撒冷将军Tiberias死前终于明白了，「First, I thought we were fighting for God. Then I realized we were fighting for wealth and land」。若干年以后，君士坦丁堡被自己人洗劫了。</p>
<p>近代文明。杀戮原住民并殖民是这几百年的主题。我们都熟悉的，为了殖民地利益而爆发的一战，为了「生存空间」而爆发的二战。</p>
<h3 id="和平"><a href="#和平" class="headerlink" title="和平"></a>和平</h3><p>Thomas Paine在《人的权利》中写道：在厌倦了战争和人类的屠杀后，他们坐下来休息，并称之为和平。</p>
<p>如果可以，休息地久一点吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;断断续续读了2个月，毕业了，两本总共800多页的《全球通史》也读完了，还外加一些相关的纪录片和电影。&lt;/p&gt;
&lt;h3 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h3&gt;&lt;p&gt;寒假看完了火影究极风暴4
    
    </summary>
    
      <category term="History" scheme="http://cheesehigh.com/categories/History/"/>
    
    
  </entry>
  
  <entry>
    <title>I Love Five</title>
    <link href="http://cheesehigh.com/2016/06/02/hello/"/>
    <id>http://cheesehigh.com/2016/06/02/hello/</id>
    <published>2016-06-02T15:42:10.000Z</published>
    <updated>2016-06-30T13:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I Love Five</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="Five" scheme="http://cheesehigh.com/categories/Five/"/>
    
    
  </entry>
  
</feed>
